// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TraceLoggingClient is the client API for TraceLogging service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TraceLoggingClient interface {
	SignalLogger(ctx context.Context, in *SignalMsg, opts ...grpc.CallOption) (*empty.Empty, error)
}

type traceLoggingClient struct {
	cc grpc.ClientConnInterface
}

func NewTraceLoggingClient(cc grpc.ClientConnInterface) TraceLoggingClient {
	return &traceLoggingClient{cc}
}

func (c *traceLoggingClient) SignalLogger(ctx context.Context, in *SignalMsg, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.TraceLogging/SignalLogger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TraceLoggingServer is the server API for TraceLogging service.
// All implementations must embed UnimplementedTraceLoggingServer
// for forward compatibility
type TraceLoggingServer interface {
	SignalLogger(context.Context, *SignalMsg) (*empty.Empty, error)
	mustEmbedUnimplementedTraceLoggingServer()
}

// UnimplementedTraceLoggingServer must be embedded to have forward compatible implementations.
type UnimplementedTraceLoggingServer struct {
}

func (UnimplementedTraceLoggingServer) SignalLogger(context.Context, *SignalMsg) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalLogger not implemented")
}
func (UnimplementedTraceLoggingServer) mustEmbedUnimplementedTraceLoggingServer() {}

// UnsafeTraceLoggingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TraceLoggingServer will
// result in compilation errors.
type UnsafeTraceLoggingServer interface {
	mustEmbedUnimplementedTraceLoggingServer()
}

func RegisterTraceLoggingServer(s grpc.ServiceRegistrar, srv TraceLoggingServer) {
	s.RegisterService(&TraceLogging_ServiceDesc, srv)
}

func _TraceLogging_SignalLogger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraceLoggingServer).SignalLogger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TraceLogging/SignalLogger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraceLoggingServer).SignalLogger(ctx, req.(*SignalMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// TraceLogging_ServiceDesc is the grpc.ServiceDesc for TraceLogging service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TraceLogging_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TraceLogging",
	HandlerType: (*TraceLoggingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignalLogger",
			Handler:    _TraceLogging_SignalLogger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "traceLog.proto",
}
